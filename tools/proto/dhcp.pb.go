// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        (unknown)
// source: proto/dhcp.proto

package api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NetworkInterface struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Alias      string   `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	MacAddress string   `protobuf:"bytes,3,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	Ip         string   `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`
	Mask       string   `protobuf:"bytes,5,opt,name=mask,proto3" json:"mask,omitempty"`
	Gateway    string   `protobuf:"bytes,6,opt,name=gateway,proto3" json:"gateway,omitempty"`
	Dns        []string `protobuf:"bytes,7,rep,name=dns,proto3" json:"dns,omitempty"`
	Up         bool     `protobuf:"varint,8,opt,name=up,proto3" json:"up,omitempty"`
}

func (x *NetworkInterface) Reset() {
	*x = NetworkInterface{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dhcp_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NetworkInterface) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NetworkInterface) ProtoMessage() {}

func (x *NetworkInterface) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dhcp_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NetworkInterface.ProtoReflect.Descriptor instead.
func (*NetworkInterface) Descriptor() ([]byte, []int) {
	return file_proto_dhcp_proto_rawDescGZIP(), []int{0}
}

func (x *NetworkInterface) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NetworkInterface) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *NetworkInterface) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *NetworkInterface) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *NetworkInterface) GetMask() string {
	if x != nil {
		return x.Mask
	}
	return ""
}

func (x *NetworkInterface) GetGateway() string {
	if x != nil {
		return x.Gateway
	}
	return ""
}

func (x *NetworkInterface) GetDns() []string {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *NetworkInterface) GetUp() bool {
	if x != nil {
		return x.Up
	}
	return false
}

type RequestConfigureDHCP struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InterfaceName string   `protobuf:"bytes,1,opt,name=interface_name,json=interfaceName,proto3" json:"interface_name,omitempty"`
	Ip            string   `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Mask          int32    `protobuf:"varint,3,opt,name=mask,proto3" json:"mask,omitempty"`
	IpRange       []string `protobuf:"bytes,4,rep,name=ip_range,json=ipRange,proto3" json:"ip_range,omitempty"`
	Dns           []string `protobuf:"bytes,5,rep,name=dns,proto3" json:"dns,omitempty"`
	LeaseTime     int32    `protobuf:"varint,6,opt,name=lease_time,json=leaseTime,proto3" json:"lease_time,omitempty"`
}

func (x *RequestConfigureDHCP) Reset() {
	*x = RequestConfigureDHCP{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dhcp_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestConfigureDHCP) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestConfigureDHCP) ProtoMessage() {}

func (x *RequestConfigureDHCP) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dhcp_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestConfigureDHCP.ProtoReflect.Descriptor instead.
func (*RequestConfigureDHCP) Descriptor() ([]byte, []int) {
	return file_proto_dhcp_proto_rawDescGZIP(), []int{1}
}

func (x *RequestConfigureDHCP) GetInterfaceName() string {
	if x != nil {
		return x.InterfaceName
	}
	return ""
}

func (x *RequestConfigureDHCP) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *RequestConfigureDHCP) GetMask() int32 {
	if x != nil {
		return x.Mask
	}
	return 0
}

func (x *RequestConfigureDHCP) GetIpRange() []string {
	if x != nil {
		return x.IpRange
	}
	return nil
}

func (x *RequestConfigureDHCP) GetDns() []string {
	if x != nil {
		return x.Dns
	}
	return nil
}

func (x *RequestConfigureDHCP) GetLeaseTime() int32 {
	if x != nil {
		return x.LeaseTime
	}
	return 0
}

type Lease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MacAddress string                 `protobuf:"bytes,1,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	Ip         string                 `protobuf:"bytes,2,opt,name=ip,proto3" json:"ip,omitempty"`
	Expire     *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=expire,proto3" json:"expire,omitempty"`
}

func (x *Lease) Reset() {
	*x = Lease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dhcp_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Lease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lease) ProtoMessage() {}

func (x *Lease) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dhcp_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lease.ProtoReflect.Descriptor instead.
func (*Lease) Descriptor() ([]byte, []int) {
	return file_proto_dhcp_proto_rawDescGZIP(), []int{2}
}

func (x *Lease) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *Lease) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *Lease) GetExpire() *timestamppb.Timestamp {
	if x != nil {
		return x.Expire
	}
	return nil
}

type ResponseGetNetworkInterfaces struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool                `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   string              `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Data    []*NetworkInterface `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ResponseGetNetworkInterfaces) Reset() {
	*x = ResponseGetNetworkInterfaces{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dhcp_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseGetNetworkInterfaces) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseGetNetworkInterfaces) ProtoMessage() {}

func (x *ResponseGetNetworkInterfaces) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dhcp_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseGetNetworkInterfaces.ProtoReflect.Descriptor instead.
func (*ResponseGetNetworkInterfaces) Descriptor() ([]byte, []int) {
	return file_proto_dhcp_proto_rawDescGZIP(), []int{3}
}

func (x *ResponseGetNetworkInterfaces) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ResponseGetNetworkInterfaces) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ResponseGetNetworkInterfaces) GetData() []*NetworkInterface {
	if x != nil {
		return x.Data
	}
	return nil
}

type ResponseGetLeases struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool     `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	Error   string   `protobuf:"bytes,2,opt,name=error,proto3" json:"error,omitempty"`
	Data    []*Lease `protobuf:"bytes,3,rep,name=data,proto3" json:"data,omitempty"`
}

func (x *ResponseGetLeases) Reset() {
	*x = ResponseGetLeases{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_dhcp_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseGetLeases) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseGetLeases) ProtoMessage() {}

func (x *ResponseGetLeases) ProtoReflect() protoreflect.Message {
	mi := &file_proto_dhcp_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseGetLeases.ProtoReflect.Descriptor instead.
func (*ResponseGetLeases) Descriptor() ([]byte, []int) {
	return file_proto_dhcp_proto_rawDescGZIP(), []int{4}
}

func (x *ResponseGetLeases) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ResponseGetLeases) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

func (x *ResponseGetLeases) GetData() []*Lease {
	if x != nil {
		return x.Data
	}
	return nil
}

var File_proto_dhcp_proto protoreflect.FileDescriptor

var file_proto_dhcp_proto_rawDesc = []byte{
	0x0a, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x64, 0x68, 0x63, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x04, 0x64, 0x68, 0x63, 0x70, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x65,
	0x6e, 0x65, 0x72, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x01, 0x0a, 0x10,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61,
	0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6e, 0x73,
	0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x75,
	0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x75, 0x70, 0x22, 0xad, 0x01, 0x0a, 0x14,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x44, 0x48, 0x43, 0x50, 0x12, 0x25, 0x0a, 0x0e, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6d,
	0x61, 0x73, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x6b, 0x12,
	0x19, 0x0a, 0x08, 0x69, 0x70, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x07, 0x69, 0x70, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x64, 0x6e,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x64, 0x6e, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x6c, 0x0a, 0x05, 0x4c,
	0x65, 0x61, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x69, 0x70, 0x12, 0x32, 0x0a, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x06, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x22, 0x7a, 0x0a, 0x1c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x2e, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x52,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x64, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x1f, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x2e,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x32, 0x88, 0x03, 0x0a, 0x0b,
	0x44, 0x48, 0x43, 0x50, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x55, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66,
	0x61, 0x63, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x22, 0x2e, 0x64,
	0x68, 0x63, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x65, 0x74, 0x4e,
	0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x73,
	0x22, 0x00, 0x12, 0x40, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44,
	0x48, 0x43, 0x50, 0x12, 0x1a, 0x2e, 0x64, 0x68, 0x63, 0x70, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x44, 0x48, 0x43, 0x50, 0x1a,
	0x11, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x34, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x33, 0x0a, 0x04, 0x53, 0x74,
	0x6f, 0x70, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x11, 0x2e, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x35, 0x0a, 0x06, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x11, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x69, 0x63, 0x2e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x17, 0x2e, 0x64, 0x68,
	0x63, 0x70, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x47, 0x65, 0x74, 0x4c, 0x65,
	0x61, 0x73, 0x65, 0x73, 0x22, 0x00, 0x42, 0x7e, 0x0a, 0x08, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x68,
	0x63, 0x70, 0x42, 0x09, 0x44, 0x68, 0x63, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x37, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x63, 0x6f, 0x64, 0x65, 0x78, 0x74, 0x65, 0x63, 0x68, 0x2f, 0x6f, 0x63, 0x74, 0x6f, 0x70,
	0x75, 0x73, 0x6c, 0x62, 0x2f, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2f, 0x61, 0x70, 0x69, 0x3b, 0x61, 0x70, 0x69, 0xa2, 0x02, 0x03, 0x44, 0x58, 0x58, 0xaa, 0x02,
	0x04, 0x44, 0x68, 0x63, 0x70, 0xca, 0x02, 0x04, 0x44, 0x68, 0x63, 0x70, 0xe2, 0x02, 0x10, 0x44,
	0x68, 0x63, 0x70, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea,
	0x02, 0x04, 0x44, 0x68, 0x63, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_dhcp_proto_rawDescOnce sync.Once
	file_proto_dhcp_proto_rawDescData = file_proto_dhcp_proto_rawDesc
)

func file_proto_dhcp_proto_rawDescGZIP() []byte {
	file_proto_dhcp_proto_rawDescOnce.Do(func() {
		file_proto_dhcp_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_dhcp_proto_rawDescData)
	})
	return file_proto_dhcp_proto_rawDescData
}

var file_proto_dhcp_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_dhcp_proto_goTypes = []any{
	(*NetworkInterface)(nil),             // 0: dhcp.NetworkInterface
	(*RequestConfigureDHCP)(nil),         // 1: dhcp.RequestConfigureDHCP
	(*Lease)(nil),                        // 2: dhcp.Lease
	(*ResponseGetNetworkInterfaces)(nil), // 3: dhcp.ResponseGetNetworkInterfaces
	(*ResponseGetLeases)(nil),            // 4: dhcp.ResponseGetLeases
	(*timestamppb.Timestamp)(nil),        // 5: google.protobuf.Timestamp
	(*emptypb.Empty)(nil),                // 6: google.protobuf.Empty
	(*Response)(nil),                     // 7: generic.Response
}
var file_proto_dhcp_proto_depIdxs = []int32{
	5, // 0: dhcp.Lease.expire:type_name -> google.protobuf.Timestamp
	0, // 1: dhcp.ResponseGetNetworkInterfaces.data:type_name -> dhcp.NetworkInterface
	2, // 2: dhcp.ResponseGetLeases.data:type_name -> dhcp.Lease
	6, // 3: dhcp.DHCPService.GetNetworksInterfaces:input_type -> google.protobuf.Empty
	1, // 4: dhcp.DHCPService.ConfigureDHCP:input_type -> dhcp.RequestConfigureDHCP
	6, // 5: dhcp.DHCPService.Start:input_type -> google.protobuf.Empty
	6, // 6: dhcp.DHCPService.Stop:input_type -> google.protobuf.Empty
	6, // 7: dhcp.DHCPService.Reload:input_type -> google.protobuf.Empty
	6, // 8: dhcp.DHCPService.GetLeases:input_type -> google.protobuf.Empty
	3, // 9: dhcp.DHCPService.GetNetworksInterfaces:output_type -> dhcp.ResponseGetNetworkInterfaces
	7, // 10: dhcp.DHCPService.ConfigureDHCP:output_type -> generic.Response
	7, // 11: dhcp.DHCPService.Start:output_type -> generic.Response
	7, // 12: dhcp.DHCPService.Stop:output_type -> generic.Response
	7, // 13: dhcp.DHCPService.Reload:output_type -> generic.Response
	4, // 14: dhcp.DHCPService.GetLeases:output_type -> dhcp.ResponseGetLeases
	9, // [9:15] is the sub-list for method output_type
	3, // [3:9] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_proto_dhcp_proto_init() }
func file_proto_dhcp_proto_init() {
	if File_proto_dhcp_proto != nil {
		return
	}
	file_proto_generic_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_dhcp_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*NetworkInterface); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dhcp_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*RequestConfigureDHCP); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dhcp_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*Lease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dhcp_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*ResponseGetNetworkInterfaces); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_dhcp_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*ResponseGetLeases); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_dhcp_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_dhcp_proto_goTypes,
		DependencyIndexes: file_proto_dhcp_proto_depIdxs,
		MessageInfos:      file_proto_dhcp_proto_msgTypes,
	}.Build()
	File_proto_dhcp_proto = out.File
	file_proto_dhcp_proto_rawDesc = nil
	file_proto_dhcp_proto_goTypes = nil
	file_proto_dhcp_proto_depIdxs = nil
}
