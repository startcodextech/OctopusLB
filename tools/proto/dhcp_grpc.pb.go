// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: proto/dhcp.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	DHCPService_GetNetworksInterfaces_FullMethodName = "/dhcp.DHCPService/GetNetworksInterfaces"
	DHCPService_ConfigureDHCP_FullMethodName         = "/dhcp.DHCPService/ConfigureDHCP"
	DHCPService_Start_FullMethodName                 = "/dhcp.DHCPService/Start"
	DHCPService_Stop_FullMethodName                  = "/dhcp.DHCPService/Stop"
	DHCPService_Reload_FullMethodName                = "/dhcp.DHCPService/Reload"
	DHCPService_GetLeases_FullMethodName             = "/dhcp.DHCPService/GetLeases"
)

// DHCPServiceClient is the client API for DHCPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DHCPServiceClient interface {
	GetNetworksInterfaces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResponseGetNetworkInterfaces, error)
	ConfigureDHCP(ctx context.Context, in *RequestConfigureDHCP, opts ...grpc.CallOption) (*Response, error)
	Start(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Response, error)
	Stop(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Response, error)
	Reload(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Response, error)
	GetLeases(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResponseGetLeases, error)
}

type dHCPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDHCPServiceClient(cc grpc.ClientConnInterface) DHCPServiceClient {
	return &dHCPServiceClient{cc}
}

func (c *dHCPServiceClient) GetNetworksInterfaces(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResponseGetNetworkInterfaces, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseGetNetworkInterfaces)
	err := c.cc.Invoke(ctx, DHCPService_GetNetworksInterfaces_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPServiceClient) ConfigureDHCP(ctx context.Context, in *RequestConfigureDHCP, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, DHCPService_ConfigureDHCP_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPServiceClient) Start(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, DHCPService_Start_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPServiceClient) Stop(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, DHCPService_Stop_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPServiceClient) Reload(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, DHCPService_Reload_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dHCPServiceClient) GetLeases(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*ResponseGetLeases, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseGetLeases)
	err := c.cc.Invoke(ctx, DHCPService_GetLeases_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DHCPServiceServer is the server API for DHCPService service.
// All implementations must embed UnimplementedDHCPServiceServer
// for forward compatibility.
type DHCPServiceServer interface {
	GetNetworksInterfaces(context.Context, *emptypb.Empty) (*ResponseGetNetworkInterfaces, error)
	ConfigureDHCP(context.Context, *RequestConfigureDHCP) (*Response, error)
	Start(context.Context, *emptypb.Empty) (*Response, error)
	Stop(context.Context, *emptypb.Empty) (*Response, error)
	Reload(context.Context, *emptypb.Empty) (*Response, error)
	GetLeases(context.Context, *emptypb.Empty) (*ResponseGetLeases, error)
	mustEmbedUnimplementedDHCPServiceServer()
}

// UnimplementedDHCPServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDHCPServiceServer struct{}

func (UnimplementedDHCPServiceServer) GetNetworksInterfaces(context.Context, *emptypb.Empty) (*ResponseGetNetworkInterfaces, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNetworksInterfaces not implemented")
}
func (UnimplementedDHCPServiceServer) ConfigureDHCP(context.Context, *RequestConfigureDHCP) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfigureDHCP not implemented")
}
func (UnimplementedDHCPServiceServer) Start(context.Context, *emptypb.Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedDHCPServiceServer) Stop(context.Context, *emptypb.Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedDHCPServiceServer) Reload(context.Context, *emptypb.Empty) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reload not implemented")
}
func (UnimplementedDHCPServiceServer) GetLeases(context.Context, *emptypb.Empty) (*ResponseGetLeases, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeases not implemented")
}
func (UnimplementedDHCPServiceServer) mustEmbedUnimplementedDHCPServiceServer() {}
func (UnimplementedDHCPServiceServer) testEmbeddedByValue()                     {}

// UnsafeDHCPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DHCPServiceServer will
// result in compilation errors.
type UnsafeDHCPServiceServer interface {
	mustEmbedUnimplementedDHCPServiceServer()
}

func RegisterDHCPServiceServer(s grpc.ServiceRegistrar, srv DHCPServiceServer) {
	// If the following call pancis, it indicates UnimplementedDHCPServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&DHCPService_ServiceDesc, srv)
}

func _DHCPService_GetNetworksInterfaces_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPServiceServer).GetNetworksInterfaces(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DHCPService_GetNetworksInterfaces_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPServiceServer).GetNetworksInterfaces(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPService_ConfigureDHCP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestConfigureDHCP)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPServiceServer).ConfigureDHCP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DHCPService_ConfigureDHCP_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPServiceServer).ConfigureDHCP(ctx, req.(*RequestConfigureDHCP))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DHCPService_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPServiceServer).Start(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DHCPService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPServiceServer).Stop(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPService_Reload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPServiceServer).Reload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DHCPService_Reload_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPServiceServer).Reload(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DHCPService_GetLeases_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DHCPServiceServer).GetLeases(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DHCPService_GetLeases_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DHCPServiceServer).GetLeases(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DHCPService_ServiceDesc is the grpc.ServiceDesc for DHCPService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DHCPService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dhcp.DHCPService",
	HandlerType: (*DHCPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetNetworksInterfaces",
			Handler:    _DHCPService_GetNetworksInterfaces_Handler,
		},
		{
			MethodName: "ConfigureDHCP",
			Handler:    _DHCPService_ConfigureDHCP_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _DHCPService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _DHCPService_Stop_Handler,
		},
		{
			MethodName: "Reload",
			Handler:    _DHCPService_Reload_Handler,
		},
		{
			MethodName: "GetLeases",
			Handler:    _DHCPService_GetLeases_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/dhcp.proto",
}
